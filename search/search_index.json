{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started Here you will find some examples for common M 3 G tasks using the M 3 G application programming interface (API) . You can start by: using a command-line tool such as curl to download / upload data from/to M 3 G use python (interactively, in a script, etc.). If you are familiar with RESTful API, go directly to the M 3 G Swagger UI (see below) to visualize and interact with the API.","title":"Getting started"},{"location":"#getting-started","text":"Here you will find some examples for common M 3 G tasks using the M 3 G application programming interface (API) . You can start by: using a command-line tool such as curl to download / upload data from/to M 3 G use python (interactively, in a script, etc.). If you are familiar with RESTful API, go directly to the M 3 G Swagger UI (see below) to visualize and interact with the API.","title":"Getting started"},{"location":"authorization/","text":"M 3 G access token For some operations, you need to be authorized i.e. you need the \" Application access token \": you can find it in \" My Agency \" once logged in in M 3 G, see the figure below:","title":"M<sup>3</sup>G access token"},{"location":"authorization/#m3g-access-token","text":"For some operations, you need to be authorized i.e. you need the \" Application access token \": you can find it in \" My Agency \" once logged in in M 3 G, see the figure below:","title":"M3G access token"},{"location":"curl_download/","text":"Download info from M 3 G In the Bash shell, one could use a command-line such curl to access M 3 G API : it acts as an HTTP client and allows you to send requests and display/store the corresponding responses. GET the sitelog of a given station Let's say you have identified a site log (i.e. information that you also get in the M 3 G website) by the station 9-characters id aka id e.g. BRUX00BEL, and you want to download it. M3G allows you to do this and get the output in various formats: JSON, GeodesyML or IGS site log format . To get the JSON is the format: curl -s -X GET \"https://gnss-metadata.eu/__test/v1/sitelog/view?id=BRUX00BEL\" -H \"accept: application/json\" Here we used curl to send an HTTP GET request to return the resource located by the given URL. In practice you can omit the -X GET (which is the default) and you might want to 'nicely' format the output with json_pp : curl -s -X GET \"https://gnss-metadata.eu/__test/v1/sitelog/view?id=BRUX00BEL\" -H \"accept: application/json\" | json_pp and get the following output: { \"_links\" : { \"geodesyML\" : { \"href\" : \"https://gnss-metadata.eu/__test/v1/sitelog/exportxml?id=BRUX00BEL\" }, \"self\" : { \"href\" : \"https://gnss-metadata.eu/__test/v1/sitelog/view?id=BRUX00BEL\" }, \"sitelog\" : { \"href\" : \"https://gnss-metadata.eu/__test/v1/sitelog/exportlog?id=BRUX00BEL\" } }, \"dateUpdate\" : \"2020-09-30T09:39Z\", \"geodesymlName\" : \"BRUX00BEL.xml\", \"id\" : \"BRUX00BEL\", ... For the GeodesyML or the IGS site log format: curl -s -X GET \"https://gnss-metadata.eu/__test/v1/sitelog/exportxml?id=BRUX00BEL\" -H \"accept: application/geodesyML0.4\" curl -s -X GET \"https://gnss-metadata.eu/__test/v1/sitelog/exportlog?id=BRUX00BEL\" -H \"accept: application/sitelog\" GET the sitelogs of all stations matching a search criterion Let's say you want to get the site log for entries that fit a give search criterion, e.g. stations having the string \"PRAG\" in their 9-char id: curl -g -s -X GET \"https://gnss-metadata.eu/__test/v1/sitelog?page=1&filter[id][like]=PRAG\" -H \"accept: text/plain\" As you can notice by looking at the command line above, you can select which page of results should be returned ( ?page=1 ). This is one of the \"pagination\" parameters. See, for example, a REST API handbook for more info. More conveniently, one can select one of the columns of the output and get: curl -g -s -X GET \"https://gnss-metadata.eu/__test/v1/sitelog?page=1&filter[id][like]=PRAG\" -H \"accept: text/plain\" | awk '{print $1}' and get: id PRAG00CZE PRAG00REU ... aka the site logs of the entries match your search criterion: filter[id][like]=PRAG . There are various other query parameters. You might find some others in the generated swagger dashboard of our API . Note that, on most terminals, if [] and/or {} are present in the URL, one needs to add -g to the command line to disable the \"URL globbing parser\" and escape parentheses. GET list of stations included in a given network It could be useful to simply get a list of stations (9-char id) included in a given network e.g. EPN, EPOS. Here we'll need to use curl and a bit of Python, but no special libraries: curl -s -X GET \"https://gnss-metadata.eu/__test/v1/network/view?id=EPN\" -H \"accept: application/json\" | python -c \"import sys,json; print(json.load(sys.stdin)['included'])\" You'll get a list of stations e.g. ['BRUX00BEL', 'AUBG00DEU', 'NOA100GRC', 'GOR200DEU', 'BORJ00DEU', 'HEL200DEU',... Similarly, to get the list of stations proposed to a given network e.g. EPOS: curl -s -X GET \"https://gnss-metadata.eu/__test/v1/network/view?id=EPOS\" -H \"accept: application/json\" | python -c \"import sys,json; print(json.load(sys.stdin)['proposed'])\" GET list of satellite systems that a given station is currently tracking curl -s -X GET \"https://gnss-metadata.eu/__test/v1/sitelog/view?id=BRUX00BEL\" -H \"accept: application/json\" | python -c \"import sys,json; print(json.load(sys.stdin)['sitelog']['receivers'][-1]['satelliteSystem'])\" ['GPS', 'GLO', 'GAL', 'BDS', 'QZSS', 'IRNSS', 'SBAS']","title":"GET data from M<sup>3</sup>G"},{"location":"curl_download/#download-info-from-m3g","text":"In the Bash shell, one could use a command-line such curl to access M 3 G API : it acts as an HTTP client and allows you to send requests and display/store the corresponding responses.","title":"Download info from M3G"},{"location":"curl_download/#get-the-sitelog-of-a-given-station","text":"Let's say you have identified a site log (i.e. information that you also get in the M 3 G website) by the station 9-characters id aka id e.g. BRUX00BEL, and you want to download it. M3G allows you to do this and get the output in various formats: JSON, GeodesyML or IGS site log format . To get the JSON is the format: curl -s -X GET \"https://gnss-metadata.eu/__test/v1/sitelog/view?id=BRUX00BEL\" -H \"accept: application/json\" Here we used curl to send an HTTP GET request to return the resource located by the given URL. In practice you can omit the -X GET (which is the default) and you might want to 'nicely' format the output with json_pp : curl -s -X GET \"https://gnss-metadata.eu/__test/v1/sitelog/view?id=BRUX00BEL\" -H \"accept: application/json\" | json_pp and get the following output: { \"_links\" : { \"geodesyML\" : { \"href\" : \"https://gnss-metadata.eu/__test/v1/sitelog/exportxml?id=BRUX00BEL\" }, \"self\" : { \"href\" : \"https://gnss-metadata.eu/__test/v1/sitelog/view?id=BRUX00BEL\" }, \"sitelog\" : { \"href\" : \"https://gnss-metadata.eu/__test/v1/sitelog/exportlog?id=BRUX00BEL\" } }, \"dateUpdate\" : \"2020-09-30T09:39Z\", \"geodesymlName\" : \"BRUX00BEL.xml\", \"id\" : \"BRUX00BEL\", ... For the GeodesyML or the IGS site log format: curl -s -X GET \"https://gnss-metadata.eu/__test/v1/sitelog/exportxml?id=BRUX00BEL\" -H \"accept: application/geodesyML0.4\" curl -s -X GET \"https://gnss-metadata.eu/__test/v1/sitelog/exportlog?id=BRUX00BEL\" -H \"accept: application/sitelog\"","title":"GET the sitelog of a given station "},{"location":"curl_download/#get-the-sitelogs-of-all-stations-matching-a-search-criterion","text":"Let's say you want to get the site log for entries that fit a give search criterion, e.g. stations having the string \"PRAG\" in their 9-char id: curl -g -s -X GET \"https://gnss-metadata.eu/__test/v1/sitelog?page=1&filter[id][like]=PRAG\" -H \"accept: text/plain\" As you can notice by looking at the command line above, you can select which page of results should be returned ( ?page=1 ). This is one of the \"pagination\" parameters. See, for example, a REST API handbook for more info. More conveniently, one can select one of the columns of the output and get: curl -g -s -X GET \"https://gnss-metadata.eu/__test/v1/sitelog?page=1&filter[id][like]=PRAG\" -H \"accept: text/plain\" | awk '{print $1}' and get: id PRAG00CZE PRAG00REU ... aka the site logs of the entries match your search criterion: filter[id][like]=PRAG . There are various other query parameters. You might find some others in the generated swagger dashboard of our API . Note that, on most terminals, if [] and/or {} are present in the URL, one needs to add -g to the command line to disable the \"URL globbing parser\" and escape parentheses.","title":"GET the sitelogs of all stations matching a search criterion"},{"location":"curl_download/#get-list-of-stations-included-in-a-given-network","text":"It could be useful to simply get a list of stations (9-char id) included in a given network e.g. EPN, EPOS. Here we'll need to use curl and a bit of Python, but no special libraries: curl -s -X GET \"https://gnss-metadata.eu/__test/v1/network/view?id=EPN\" -H \"accept: application/json\" | python -c \"import sys,json; print(json.load(sys.stdin)['included'])\" You'll get a list of stations e.g. ['BRUX00BEL', 'AUBG00DEU', 'NOA100GRC', 'GOR200DEU', 'BORJ00DEU', 'HEL200DEU',... Similarly, to get the list of stations proposed to a given network e.g. EPOS: curl -s -X GET \"https://gnss-metadata.eu/__test/v1/network/view?id=EPOS\" -H \"accept: application/json\" | python -c \"import sys,json; print(json.load(sys.stdin)['proposed'])\"","title":"GET list of stations included in a given network"},{"location":"curl_download/#get-list-of-satellite-systems-that-a-given-station-is-currently-tracking","text":"curl -s -X GET \"https://gnss-metadata.eu/__test/v1/sitelog/view?id=BRUX00BEL\" -H \"accept: application/json\" | python -c \"import sys,json; print(json.load(sys.stdin)['sitelog']['receivers'][-1]['satelliteSystem'])\" ['GPS', 'GLO', 'GAL', 'BDS', 'QZSS', 'IRNSS', 'SBAS']","title":"GET list of satellite systems that a given station is currently tracking"},{"location":"curl_upload/","text":"Upload info to M 3 G In the Bash shell, one could use a command-line such curl to access M 3 G API : it acts as an HTTP client and allows you to send requests and display/store the corresponding responses. Let's look at a quick test example on how to update/change the firmware section of station (given its 9-character id). Indeed, if one has a look at the M 3 G API documentation , the required argument are the id aka the station 9-characters id and the records that will be changed as key/values pairs: the name of the person who is allowed to change the site log ( updateMadeBy ), the new firmware version ( changedTo ) and the date. To do this, one needs choose a station belonging to his/her agency and first get authorized. You need the \"Application access token\" . Let's pick the station BRUX00BEL and let's say I'd like to change the version of its firmware to '5.3.1'. One would need to pass some data, in json format e.g. stored in the file firmware.json : { \"updateMadeBy\" : \"Carine Bruyninx\" , \"endOfTheLastSection\" : \"2020-09-30T09:35Z\" , \"changedTo\" : \"5.3.1\" , \"startOfTheNewSection\" : \"2020-09-30T09:36Z\" } where the name of the person appearing as updateMadeBy must correspond to one of the contacts already set up in the My agency page in M 3 G (see figure above). Then, via curl : curl -i -X PUT \"https://gnss-metadata.eu/__test/v1/sitelog/firmware-change?id=BRUX00BEL\" -H \"accept: application/json\" -H \"Authorization: Bearer xxx..\" -H \"Content-Type: application/json\" -d @firmware.json where xxx.. is your \" Application access token \". The option -i will allow you to get back some useful information about your HTTP request, including HTTP response status code ( defined by HTTP standards ) e.g. 200 for a successful request: HTTP / 1 . 1 200 OK Date : Wed , 30 Sep 2020 09 : 39 : 55 GMT Server : Apache / 2 . 4 . 6 ( CentOS ) OpenSSL / 1 . 0 . 2k-fips Vary : Accept Set-Cookie : _csrf = 8fcbeb32215f670ee60463f6276a160c385a199d5e096863abc43c8bb5e8d782a % 3A2 % 3A % 7Bi % 3A0 % 3Bs % 3A5 % 3A % 22_csrf % 22 % 3Bi % 3A1 % 3Bs % 3A32 % 3A % 22RsJfDHRXLUxqkdYTqnxwE9oRysUseDiE % 22 % 3B % 7D ; path =/; HttpOnly Content-Length : 590 Content-Type : application / json ; charset = UTF-8 { \"id\":\"BRUX00BEL\", \"uri\":\" https : // gnss-metadata . eu / __test / v1 / sitelog / view ? id = BRUX00BEL \", \" md5Sitelog \":\" c569da06b17e8acf75e30c86c6024935 \", \" md5Geodesyml \":\" 8613 e46ce60c32b260b72915ffef770c \", \" sitelogName \":\" brux00bel_20200930 . log \", \" geodesymlName \":\" BRUX00BEL . xml \", \" preparedDate \":\" 2020-09-30 T00 : 00 Z \", \" dateUpdate \":\" 2020-09-30 T09 : 39 Z \", \" _links \":{\" self \":{\" href \":\" https :// gnss-metadata . eu / __test / v1 / sitelog / view ? id = BRUX00BEL \"},\" geodesyML \":{\" href \":\" https :// gnss-metadata . eu / __test / v1 / sitelog / exportxml ? id = BRUX00BEL \"},\" sitelog \":{\" href \":\" https :// gnss-metadata . eu / __test / v1 / sitelog / exportlog ? id = BRUX00BEL \" } }} In the output information above, you also get the links to download the updated site log in various format e.g. https://gnss-metadata.eu/__test/v1/sitelog/exportlog?id=BRUX00BEL","title":"PUT data on M<sup>3</sup>G"},{"location":"curl_upload/#upload-info-to-m3g","text":"In the Bash shell, one could use a command-line such curl to access M 3 G API : it acts as an HTTP client and allows you to send requests and display/store the corresponding responses. Let's look at a quick test example on how to update/change the firmware section of station (given its 9-character id). Indeed, if one has a look at the M 3 G API documentation , the required argument are the id aka the station 9-characters id and the records that will be changed as key/values pairs: the name of the person who is allowed to change the site log ( updateMadeBy ), the new firmware version ( changedTo ) and the date. To do this, one needs choose a station belonging to his/her agency and first get authorized. You need the \"Application access token\" . Let's pick the station BRUX00BEL and let's say I'd like to change the version of its firmware to '5.3.1'. One would need to pass some data, in json format e.g. stored in the file firmware.json : { \"updateMadeBy\" : \"Carine Bruyninx\" , \"endOfTheLastSection\" : \"2020-09-30T09:35Z\" , \"changedTo\" : \"5.3.1\" , \"startOfTheNewSection\" : \"2020-09-30T09:36Z\" } where the name of the person appearing as updateMadeBy must correspond to one of the contacts already set up in the My agency page in M 3 G (see figure above). Then, via curl : curl -i -X PUT \"https://gnss-metadata.eu/__test/v1/sitelog/firmware-change?id=BRUX00BEL\" -H \"accept: application/json\" -H \"Authorization: Bearer xxx..\" -H \"Content-Type: application/json\" -d @firmware.json where xxx.. is your \" Application access token \". The option -i will allow you to get back some useful information about your HTTP request, including HTTP response status code ( defined by HTTP standards ) e.g. 200 for a successful request: HTTP / 1 . 1 200 OK Date : Wed , 30 Sep 2020 09 : 39 : 55 GMT Server : Apache / 2 . 4 . 6 ( CentOS ) OpenSSL / 1 . 0 . 2k-fips Vary : Accept Set-Cookie : _csrf = 8fcbeb32215f670ee60463f6276a160c385a199d5e096863abc43c8bb5e8d782a % 3A2 % 3A % 7Bi % 3A0 % 3Bs % 3A5 % 3A % 22_csrf % 22 % 3Bi % 3A1 % 3Bs % 3A32 % 3A % 22RsJfDHRXLUxqkdYTqnxwE9oRysUseDiE % 22 % 3B % 7D ; path =/; HttpOnly Content-Length : 590 Content-Type : application / json ; charset = UTF-8 { \"id\":\"BRUX00BEL\", \"uri\":\" https : // gnss-metadata . eu / __test / v1 / sitelog / view ? id = BRUX00BEL \", \" md5Sitelog \":\" c569da06b17e8acf75e30c86c6024935 \", \" md5Geodesyml \":\" 8613 e46ce60c32b260b72915ffef770c \", \" sitelogName \":\" brux00bel_20200930 . log \", \" geodesymlName \":\" BRUX00BEL . xml \", \" preparedDate \":\" 2020-09-30 T00 : 00 Z \", \" dateUpdate \":\" 2020-09-30 T09 : 39 Z \", \" _links \":{\" self \":{\" href \":\" https :// gnss-metadata . eu / __test / v1 / sitelog / view ? id = BRUX00BEL \"},\" geodesyML \":{\" href \":\" https :// gnss-metadata . eu / __test / v1 / sitelog / exportxml ? id = BRUX00BEL \"},\" sitelog \":{\" href \":\" https :// gnss-metadata . eu / __test / v1 / sitelog / exportlog ? id = BRUX00BEL \" } }} In the output information above, you also get the links to download the updated site log in various format e.g. https://gnss-metadata.eu/__test/v1/sitelog/exportlog?id=BRUX00BEL","title":"Upload info to M3G"},{"location":"disclaimer/","text":"Disclaimer The examples presented here were only tested on GitBash and MobaXTerm (Windows), Bash (for Linux etc) and Terminal (MacOS).","title":"Disclaimer"},{"location":"disclaimer/#disclaimer","text":"The examples presented here were only tested on GitBash and MobaXTerm (Windows), Bash (for Linux etc) and Terminal (MacOS).","title":"Disclaimer"},{"location":"intro/","text":"Short intro to M3G API M 3 G offers some of its functionalities through an application programming interface (API). In particular, a RESTful HTTP API that allows you to interact with M 3 G purely as data that can be uploaded, accessed, searched for, etc. via HTTP requests . HTTP basically allows you to GET , POST , PUT , DELETE etc. resources on a remote server. These resources are identified via URLs (=uniform resource locator). URLs usually consists of a protocol (e.g. HTTP), a domain (our servers), a path (a place on our servers), and query parameters (additional options). At present, M 3 G API provides 5 main \"groups\" of operations: Network License Metadata , Product and Update (i.e. to get info, export or update some sections of station site logs in M 3 G, respectively) Within most of these resource \"groups\", you find endpoints that either allow you to retrieve info on a given M 3 G entry (i.e. a network, a station) or to ask a query to locate many M 3 G entries at the same time (see the M 3 G Swagger user interface ). One can start to test M 3 G API thanks to different tools and libraries. For example, one could use: an HTTP program like curl to directly use M 3 G API from within a shell a generic Python HTTP library such as requests the browser, via the M 3 G Swagger UI , based on an OpenAPI spec , describing some of M 3 G function calls In the following sections, you'll find some examples for common M 3 G tasks using various tools/options.","title":"Intro to M<sup>3</sup>G API"},{"location":"intro/#short-intro-to-m3g-api","text":"M 3 G offers some of its functionalities through an application programming interface (API). In particular, a RESTful HTTP API that allows you to interact with M 3 G purely as data that can be uploaded, accessed, searched for, etc. via HTTP requests . HTTP basically allows you to GET , POST , PUT , DELETE etc. resources on a remote server. These resources are identified via URLs (=uniform resource locator). URLs usually consists of a protocol (e.g. HTTP), a domain (our servers), a path (a place on our servers), and query parameters (additional options). At present, M 3 G API provides 5 main \"groups\" of operations: Network License Metadata , Product and Update (i.e. to get info, export or update some sections of station site logs in M 3 G, respectively) Within most of these resource \"groups\", you find endpoints that either allow you to retrieve info on a given M 3 G entry (i.e. a network, a station) or to ask a query to locate many M 3 G entries at the same time (see the M 3 G Swagger user interface ). One can start to test M 3 G API thanks to different tools and libraries. For example, one could use: an HTTP program like curl to directly use M 3 G API from within a shell a generic Python HTTP library such as requests the browser, via the M 3 G Swagger UI , based on an OpenAPI spec , describing some of M 3 G function calls In the following sections, you'll find some examples for common M 3 G tasks using various tools/options.","title":"Short intro to M3G API"},{"location":"python/","text":"Python requests library to interact with M 3 G One could integrate the REST API with different languages, for example Python. Similar to curl in the shell, you can use requests in Python (quickly installable via pip install requests ). It's a generic HTTP client library that allows you to send HTTP requests. Let's look at the test example mentioned above, on how to update/change the firmware section of a station. To do this, one needs to get authorization via the \"Application access token\" : import requests headers = { 'accept' : 'application/json' , 'Authorization' : 'Bearer xxx..' } # where 'xxx..' is your \"Application access token\" # authorization is not needed for GET requests: #headers={'accept': 'application/json'} As mentioned in the example with curl , to perform this specific task, the M 3 G API requires the id aka the station 9-characters id and the records that will be changed as key/values pairs: the name of the person who is allowed to change the site log ( updateMadeBy ), the new firmware version ( changedTo ) and the date. One could write a couple of functions on the fly using the requests module we have just loaded: #store the M3G API URL: def url ( path ): return 'https://gnss-metadata.eu/__test/v1/' + path #get info about a site log giventhe 9-char id: def get_sitelog ( station_id ): return requests . get ( url ( 'sitelog/view?id= {} ' . format ( station_id )), headers = headers ) #update a record in the site log (the firmware version in this case) given the 9-char id: def update_firmware ( station_id , updateMadeBy , changedTo , datetimeISO , datetimeISOfuture ): url = url ( 'sitelog/firmware-change?id= {} ' . format ( station_id )) return requests . put ( url , json = { 'updateMadeBy' : updateMadeBy , 'changedTo' : changedTo , 'endOfTheLastSection' : datetimeISO , 'startOfTheNewSection' : datetimeISOfuture , }, headers = headers ) We then send the request to update the site log with the mandatory information: my_update = update_firmware ( 'BRUX00BEL' , 'Carine Bruyninx' , '5.3.1' , '2020-09-04T11:50Z' , '2020-09-04T11:51Z' ) my_update . status_code The latter will return as a response one of HTTP status codes, as we mentioned before: 200 We can now check if the record now stored in M 3 G is what we expect. We might want to get the link to the updated site log: my_update . url 'https://gnss-metadata.eu/__test/v1/sitelog/view?id=BRUX00BEL' or retrieve the info about the sitelog of our station (BRUX00BEL) mystation = get_sitelog ( 'BRUX00BEL' ) my_station . status_code and indeed the request is successful: 200 We can now have a look at the content of the record we're interested in aka firmwareVersion : my_station . json ()[ 'sitelog' ][ 'receivers' ][ - 1 ][ 'firmwareVersion' ] and get: '5.3.1' .","title":"Use the <i>requests</i> library"},{"location":"python/#python-requests-library-to-interact-with-m3g","text":"One could integrate the REST API with different languages, for example Python. Similar to curl in the shell, you can use requests in Python (quickly installable via pip install requests ). It's a generic HTTP client library that allows you to send HTTP requests. Let's look at the test example mentioned above, on how to update/change the firmware section of a station. To do this, one needs to get authorization via the \"Application access token\" : import requests headers = { 'accept' : 'application/json' , 'Authorization' : 'Bearer xxx..' } # where 'xxx..' is your \"Application access token\" # authorization is not needed for GET requests: #headers={'accept': 'application/json'} As mentioned in the example with curl , to perform this specific task, the M 3 G API requires the id aka the station 9-characters id and the records that will be changed as key/values pairs: the name of the person who is allowed to change the site log ( updateMadeBy ), the new firmware version ( changedTo ) and the date. One could write a couple of functions on the fly using the requests module we have just loaded: #store the M3G API URL: def url ( path ): return 'https://gnss-metadata.eu/__test/v1/' + path #get info about a site log giventhe 9-char id: def get_sitelog ( station_id ): return requests . get ( url ( 'sitelog/view?id= {} ' . format ( station_id )), headers = headers ) #update a record in the site log (the firmware version in this case) given the 9-char id: def update_firmware ( station_id , updateMadeBy , changedTo , datetimeISO , datetimeISOfuture ): url = url ( 'sitelog/firmware-change?id= {} ' . format ( station_id )) return requests . put ( url , json = { 'updateMadeBy' : updateMadeBy , 'changedTo' : changedTo , 'endOfTheLastSection' : datetimeISO , 'startOfTheNewSection' : datetimeISOfuture , }, headers = headers ) We then send the request to update the site log with the mandatory information: my_update = update_firmware ( 'BRUX00BEL' , 'Carine Bruyninx' , '5.3.1' , '2020-09-04T11:50Z' , '2020-09-04T11:51Z' ) my_update . status_code The latter will return as a response one of HTTP status codes, as we mentioned before: 200 We can now check if the record now stored in M 3 G is what we expect. We might want to get the link to the updated site log: my_update . url 'https://gnss-metadata.eu/__test/v1/sitelog/view?id=BRUX00BEL' or retrieve the info about the sitelog of our station (BRUX00BEL) mystation = get_sitelog ( 'BRUX00BEL' ) my_station . status_code and indeed the request is successful: 200 We can now have a look at the content of the record we're interested in aka firmwareVersion : my_station . json ()[ 'sitelog' ][ 'receivers' ][ - 1 ][ 'firmwareVersion' ] and get: '5.3.1' .","title":"Python requests library to interact with M3G"}]}